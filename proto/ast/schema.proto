syntax = "proto3";

package ast;

import "yaml/value.proto";

option go_package = "github.com/Jumpaku/eyamlate/golang/ast";

message Path {
  message Pos {
    int64 index = 1;
    string key = 2;
  }
  repeated Pos pos = 1;
}
message Eval {
  repeated FunDef where = 1;
  Expr eval = 2;
}

message FunDef {
  string def = 1;
  Expr value = 2;
  repeated string with = 3;
  Path path = 20;
}

message Expr {
  enum Kind {
    UNSPECIFIED = 0;
    EVAL = 1;
    SCALAR = 2;
    NEW_OBJ = 3;
    NEW_ARR = 4;
    VAL_JSON = 5;
    RANGE_ITER = 6;
    ELEM_ACCESS = 7;
    FUN_CALL = 8;
    CASE_BRANCHES = 9;
    OP_UNARY = 10;
    OP_BINARY = 11;
    OP_VARIADIC = 12;
  }
  Kind kind = 1;
  Eval eval = 2;
  Scalar scalar = 3;
  NewObj new_obj = 4;
  NewArr new_arr = 5;
  ValJson val_json = 6;
  RangeIter range_iter = 7;
  ElemAccess elem_access = 8;
  FunCall fun_call = 9;
  CaseBranches case_branches = 10;
  OpUnary op_unary = 11;
  OpBinary op_binary = 12;
  OpVariadic op_variadic = 13;
  Path path = 20;
}

message Scalar {
  yaml.Value val = 1;
}

message NewObj {
  map<string, Expr> obj = 1;
}

message NewArr {
  repeated Expr arr = 1;
}

message ValJson {
  yaml.Value json = 1;
}

message RangeIter {
  string for_pos = 1;
  string for_val = 2;
  Expr in = 3;
  Expr do = 4;
  Expr if = 5;
}

message ElemAccess {
  Expr get = 1;
  Expr from = 2;
}

message FunCall {
  string ref = 1;
  map<string, Expr> with = 2;
}

message CaseBranches {
  message Branch {
    bool is_otherwise = 1;
    Expr when = 2;
    Expr then = 3;
    Expr otherwise = 4;
  }
  repeated Branch branches = 1;
}

message OpUnary {
  enum Operator {
    UNSPECIFIED = 0;
    LEN = 1;
    NOT = 2;
    HEAD = 3;
    TAIL = 4;
    LAST = 5;
    INIT = 6;
    FLAT = 7;
    KEYS = 8;
    ABORT = 9;
  }
  Operator operator = 1;
  Expr operand = 2;
}

message OpBinary {
  enum Operator {
    UNSPECIFIED = 0;
    SUB = 1;
    DIV = 2;
    MOD = 3;
    EQ = 4;
    NEQ = 5;
    LT = 6;
    LTE = 7;
    GT = 8;
    GTE = 9;
    CMP = 10;
  }
  Operator operator = 1;
  Expr operand_left = 2;
  Expr operand_right = 3;
}

message OpVariadic {
  enum Operator {
    UNSPECIFIED = 0;
    ADD = 1;
    MUL = 2;
    AND = 3;
    OR = 4;
    CAT = 5;
    MIN = 6;
    MAX = 7;
    MERGE = 8;
  }
  Operator operator = 1;
  repeated Expr operands = 2;
}
