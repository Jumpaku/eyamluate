// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: ast/parser.proto

package ast

import (
	yaml "github.com/Jumpaku/eyamlate/golang/pb/yaml"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ParseInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *ParseInput) Reset() {
	*x = ParseInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ast_parser_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseInput) ProtoMessage() {}

func (x *ParseInput) ProtoReflect() protoreflect.Message {
	mi := &file_ast_parser_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseInput.ProtoReflect.Descriptor instead.
func (*ParseInput) Descriptor() ([]byte, []int) {
	return file_ast_parser_proto_rawDescGZIP(), []int{0}
}

func (x *ParseInput) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type ParseOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr *Expr `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
}

func (x *ParseOutput) Reset() {
	*x = ParseOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ast_parser_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseOutput) ProtoMessage() {}

func (x *ParseOutput) ProtoReflect() protoreflect.Message {
	mi := &file_ast_parser_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseOutput.ProtoReflect.Descriptor instead.
func (*ParseOutput) Descriptor() ([]byte, []int) {
	return file_ast_parser_proto_rawDescGZIP(), []int{1}
}

func (x *ParseOutput) GetExpr() *Expr {
	if x != nil {
		return x.Expr
	}
	return nil
}

type ParseExprInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path  *Path       `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Value *yaml.Value `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ParseExprInput) Reset() {
	*x = ParseExprInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ast_parser_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseExprInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseExprInput) ProtoMessage() {}

func (x *ParseExprInput) ProtoReflect() protoreflect.Message {
	mi := &file_ast_parser_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseExprInput.ProtoReflect.Descriptor instead.
func (*ParseExprInput) Descriptor() ([]byte, []int) {
	return file_ast_parser_proto_rawDescGZIP(), []int{2}
}

func (x *ParseExprInput) GetPath() *Path {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *ParseExprInput) GetValue() *yaml.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type ParseOpUnaryInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path     *Path            `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Operator OpUnary_Operator `protobuf:"varint,2,opt,name=operator,proto3,enum=ast.OpUnary_Operator" json:"operator,omitempty"`
	Value    *yaml.Value      `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ParseOpUnaryInput) Reset() {
	*x = ParseOpUnaryInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ast_parser_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseOpUnaryInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseOpUnaryInput) ProtoMessage() {}

func (x *ParseOpUnaryInput) ProtoReflect() protoreflect.Message {
	mi := &file_ast_parser_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseOpUnaryInput.ProtoReflect.Descriptor instead.
func (*ParseOpUnaryInput) Descriptor() ([]byte, []int) {
	return file_ast_parser_proto_rawDescGZIP(), []int{3}
}

func (x *ParseOpUnaryInput) GetPath() *Path {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *ParseOpUnaryInput) GetOperator() OpUnary_Operator {
	if x != nil {
		return x.Operator
	}
	return OpUnary_OPERATOR_UNSPECIFIED
}

func (x *ParseOpUnaryInput) GetValue() *yaml.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type ParseOpBinaryInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path     *Path             `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Operator OpBinary_Operator `protobuf:"varint,2,opt,name=operator,proto3,enum=ast.OpBinary_Operator" json:"operator,omitempty"`
	Value    *yaml.Value       `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ParseOpBinaryInput) Reset() {
	*x = ParseOpBinaryInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ast_parser_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseOpBinaryInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseOpBinaryInput) ProtoMessage() {}

func (x *ParseOpBinaryInput) ProtoReflect() protoreflect.Message {
	mi := &file_ast_parser_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseOpBinaryInput.ProtoReflect.Descriptor instead.
func (*ParseOpBinaryInput) Descriptor() ([]byte, []int) {
	return file_ast_parser_proto_rawDescGZIP(), []int{4}
}

func (x *ParseOpBinaryInput) GetPath() *Path {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *ParseOpBinaryInput) GetOperator() OpBinary_Operator {
	if x != nil {
		return x.Operator
	}
	return OpBinary_OPERATOR_UNSPECIFIED
}

func (x *ParseOpBinaryInput) GetValue() *yaml.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type ParseOpVariadicInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path     *Path               `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Operator OpVariadic_Operator `protobuf:"varint,2,opt,name=operator,proto3,enum=ast.OpVariadic_Operator" json:"operator,omitempty"`
	Value    *yaml.Value         `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ParseOpVariadicInput) Reset() {
	*x = ParseOpVariadicInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ast_parser_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseOpVariadicInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseOpVariadicInput) ProtoMessage() {}

func (x *ParseOpVariadicInput) ProtoReflect() protoreflect.Message {
	mi := &file_ast_parser_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseOpVariadicInput.ProtoReflect.Descriptor instead.
func (*ParseOpVariadicInput) Descriptor() ([]byte, []int) {
	return file_ast_parser_proto_rawDescGZIP(), []int{5}
}

func (x *ParseOpVariadicInput) GetPath() *Path {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *ParseOpVariadicInput) GetOperator() OpVariadic_Operator {
	if x != nil {
		return x.Operator
	}
	return OpVariadic_OPERATOR_UNSPECIFIED
}

func (x *ParseOpVariadicInput) GetValue() *yaml.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

var File_ast_parser_proto protoreflect.FileDescriptor

var file_ast_parser_proto_rawDesc = []byte{
	0x0a, 0x10, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x03, 0x61, 0x73, 0x74, 0x1a, 0x10, 0x79, 0x61, 0x6d, 0x6c, 0x2f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x61, 0x73, 0x74, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x24, 0x0a, 0x0a, 0x50,
	0x61, 0x72, 0x73, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x22, 0x2c, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x73, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x12, 0x1d, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x61, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x22,
	0x52, 0x0a, 0x0e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x45, 0x78, 0x70, 0x72, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x1d, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x21, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x79, 0x61, 0x6d, 0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x11, 0x50, 0x61, 0x72, 0x73, 0x65, 0x4f, 0x70, 0x55,
	0x6e, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x61,
	0x74, 0x68, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x31, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x61, 0x73, 0x74,
	0x2e, 0x4f, 0x70, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x61, 0x6d,
	0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8a,
	0x01, 0x0a, 0x12, 0x50, 0x61, 0x72, 0x73, 0x65, 0x4f, 0x70, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x32, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4f, 0x70, 0x42,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x61, 0x6d, 0x6c, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x14,
	0x50, 0x61, 0x72, 0x73, 0x65, 0x4f, 0x70, 0x56, 0x61, 0x72, 0x69, 0x61, 0x64, 0x69, 0x63, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x34, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4f, 0x70, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x64, 0x69, 0x63, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x61, 0x6d, 0x6c, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0xad, 0x06, 0x0a,
	0x06, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x05, 0x50, 0x61, 0x72, 0x73, 0x65,
	0x12, 0x0f, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x1a, 0x10, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x73, 0x65, 0x45, 0x76,
	0x61, 0x6c, 0x12, 0x13, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x45, 0x78,
	0x70, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x10, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x61,
	0x72, 0x73, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x09, 0x50,
	0x61, 0x72, 0x73, 0x65, 0x45, 0x78, 0x70, 0x72, 0x12, 0x13, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x50,
	0x61, 0x72, 0x73, 0x65, 0x45, 0x78, 0x70, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x10, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22,
	0x00, 0x12, 0x36, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x73, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72,
	0x12, 0x13, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x45, 0x78, 0x70, 0x72,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x10, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x73,
	0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0b, 0x50, 0x61, 0x72,
	0x73, 0x65, 0x4e, 0x65, 0x77, 0x4f, 0x62, 0x6a, 0x12, 0x13, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x50,
	0x61, 0x72, 0x73, 0x65, 0x45, 0x78, 0x70, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x10, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22,
	0x00, 0x12, 0x36, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x73, 0x65, 0x4e, 0x65, 0x77, 0x41, 0x72, 0x72,
	0x12, 0x13, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x45, 0x78, 0x70, 0x72,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x10, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x73,
	0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0c, 0x50, 0x61, 0x72,
	0x73, 0x65, 0x56, 0x61, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x13, 0x2e, 0x61, 0x73, 0x74, 0x2e,
	0x50, 0x61, 0x72, 0x73, 0x65, 0x45, 0x78, 0x70, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x10,
	0x2e, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x22, 0x00, 0x12, 0x39, 0x0a, 0x0e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x74, 0x65, 0x72, 0x12, 0x13, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65,
	0x45, 0x78, 0x70, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x10, 0x2e, 0x61, 0x73, 0x74, 0x2e,
	0x50, 0x61, 0x72, 0x73, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x00, 0x12, 0x3a, 0x0a,
	0x0f, 0x50, 0x61, 0x72, 0x73, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x13, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x45, 0x78, 0x70, 0x72,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x10, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x73,
	0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0c, 0x50, 0x61, 0x72,
	0x73, 0x65, 0x46, 0x75, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x13, 0x2e, 0x61, 0x73, 0x74, 0x2e,
	0x50, 0x61, 0x72, 0x73, 0x65, 0x45, 0x78, 0x70, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x10,
	0x2e, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x22, 0x00, 0x12, 0x3c, 0x0a, 0x11, 0x50, 0x61, 0x72, 0x73, 0x65, 0x43, 0x61, 0x73, 0x65, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x12, 0x13, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x61,
	0x72, 0x73, 0x65, 0x45, 0x78, 0x70, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x10, 0x2e, 0x61,
	0x73, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x00,
	0x12, 0x3a, 0x0a, 0x0c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x4f, 0x70, 0x55, 0x6e, 0x61, 0x72, 0x79,
	0x12, 0x16, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x4f, 0x70, 0x55, 0x6e,
	0x61, 0x72, 0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x10, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x50,
	0x61, 0x72, 0x73, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0d,
	0x50, 0x61, 0x72, 0x73, 0x65, 0x4f, 0x70, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x17, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x4f, 0x70, 0x42, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x10, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x72,
	0x73, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0f, 0x50, 0x61,
	0x72, 0x73, 0x65, 0x4f, 0x70, 0x56, 0x61, 0x72, 0x69, 0x61, 0x64, 0x69, 0x63, 0x12, 0x19, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x4f, 0x70, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x64, 0x69, 0x63, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x10, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x50,
	0x61, 0x72, 0x73, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x00, 0x42, 0x2b, 0x5a, 0x29,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4a, 0x75, 0x6d, 0x70, 0x61,
	0x6b, 0x75, 0x2f, 0x65, 0x79, 0x61, 0x6d, 0x6c, 0x61, 0x74, 0x65, 0x2f, 0x67, 0x6f, 0x6c, 0x61,
	0x6e, 0x67, 0x2f, 0x70, 0x62, 0x2f, 0x61, 0x73, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_ast_parser_proto_rawDescOnce sync.Once
	file_ast_parser_proto_rawDescData = file_ast_parser_proto_rawDesc
)

func file_ast_parser_proto_rawDescGZIP() []byte {
	file_ast_parser_proto_rawDescOnce.Do(func() {
		file_ast_parser_proto_rawDescData = protoimpl.X.CompressGZIP(file_ast_parser_proto_rawDescData)
	})
	return file_ast_parser_proto_rawDescData
}

var file_ast_parser_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_ast_parser_proto_goTypes = []any{
	(*ParseInput)(nil),           // 0: ast.ParseInput
	(*ParseOutput)(nil),          // 1: ast.ParseOutput
	(*ParseExprInput)(nil),       // 2: ast.ParseExprInput
	(*ParseOpUnaryInput)(nil),    // 3: ast.ParseOpUnaryInput
	(*ParseOpBinaryInput)(nil),   // 4: ast.ParseOpBinaryInput
	(*ParseOpVariadicInput)(nil), // 5: ast.ParseOpVariadicInput
	(*Expr)(nil),                 // 6: ast.Expr
	(*Path)(nil),                 // 7: ast.Path
	(*yaml.Value)(nil),           // 8: yaml.Value
	(OpUnary_Operator)(0),        // 9: ast.OpUnary.Operator
	(OpBinary_Operator)(0),       // 10: ast.OpBinary.Operator
	(OpVariadic_Operator)(0),     // 11: ast.OpVariadic.Operator
}
var file_ast_parser_proto_depIdxs = []int32{
	6,  // 0: ast.ParseOutput.expr:type_name -> ast.Expr
	7,  // 1: ast.ParseExprInput.path:type_name -> ast.Path
	8,  // 2: ast.ParseExprInput.value:type_name -> yaml.Value
	7,  // 3: ast.ParseOpUnaryInput.path:type_name -> ast.Path
	9,  // 4: ast.ParseOpUnaryInput.operator:type_name -> ast.OpUnary.Operator
	8,  // 5: ast.ParseOpUnaryInput.value:type_name -> yaml.Value
	7,  // 6: ast.ParseOpBinaryInput.path:type_name -> ast.Path
	10, // 7: ast.ParseOpBinaryInput.operator:type_name -> ast.OpBinary.Operator
	8,  // 8: ast.ParseOpBinaryInput.value:type_name -> yaml.Value
	7,  // 9: ast.ParseOpVariadicInput.path:type_name -> ast.Path
	11, // 10: ast.ParseOpVariadicInput.operator:type_name -> ast.OpVariadic.Operator
	8,  // 11: ast.ParseOpVariadicInput.value:type_name -> yaml.Value
	0,  // 12: ast.Parser.Parse:input_type -> ast.ParseInput
	2,  // 13: ast.Parser.ParseEval:input_type -> ast.ParseExprInput
	2,  // 14: ast.Parser.ParseExpr:input_type -> ast.ParseExprInput
	2,  // 15: ast.Parser.ParseScalar:input_type -> ast.ParseExprInput
	2,  // 16: ast.Parser.ParseNewObj:input_type -> ast.ParseExprInput
	2,  // 17: ast.Parser.ParseNewArr:input_type -> ast.ParseExprInput
	2,  // 18: ast.Parser.ParseValJson:input_type -> ast.ParseExprInput
	2,  // 19: ast.Parser.ParseRangeIter:input_type -> ast.ParseExprInput
	2,  // 20: ast.Parser.ParseElemAccess:input_type -> ast.ParseExprInput
	2,  // 21: ast.Parser.ParseFunCall:input_type -> ast.ParseExprInput
	2,  // 22: ast.Parser.ParseCaseBranches:input_type -> ast.ParseExprInput
	3,  // 23: ast.Parser.ParseOpUnary:input_type -> ast.ParseOpUnaryInput
	4,  // 24: ast.Parser.ParseOpBinary:input_type -> ast.ParseOpBinaryInput
	5,  // 25: ast.Parser.ParseOpVariadic:input_type -> ast.ParseOpVariadicInput
	1,  // 26: ast.Parser.Parse:output_type -> ast.ParseOutput
	1,  // 27: ast.Parser.ParseEval:output_type -> ast.ParseOutput
	1,  // 28: ast.Parser.ParseExpr:output_type -> ast.ParseOutput
	1,  // 29: ast.Parser.ParseScalar:output_type -> ast.ParseOutput
	1,  // 30: ast.Parser.ParseNewObj:output_type -> ast.ParseOutput
	1,  // 31: ast.Parser.ParseNewArr:output_type -> ast.ParseOutput
	1,  // 32: ast.Parser.ParseValJson:output_type -> ast.ParseOutput
	1,  // 33: ast.Parser.ParseRangeIter:output_type -> ast.ParseOutput
	1,  // 34: ast.Parser.ParseElemAccess:output_type -> ast.ParseOutput
	1,  // 35: ast.Parser.ParseFunCall:output_type -> ast.ParseOutput
	1,  // 36: ast.Parser.ParseCaseBranches:output_type -> ast.ParseOutput
	1,  // 37: ast.Parser.ParseOpUnary:output_type -> ast.ParseOutput
	1,  // 38: ast.Parser.ParseOpBinary:output_type -> ast.ParseOutput
	1,  // 39: ast.Parser.ParseOpVariadic:output_type -> ast.ParseOutput
	26, // [26:40] is the sub-list for method output_type
	12, // [12:26] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_ast_parser_proto_init() }
func file_ast_parser_proto_init() {
	if File_ast_parser_proto != nil {
		return
	}
	file_ast_schema_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ast_parser_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ParseInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ast_parser_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ParseOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ast_parser_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ParseExprInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ast_parser_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ParseOpUnaryInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ast_parser_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ParseOpBinaryInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ast_parser_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ParseOpVariadicInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ast_parser_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ast_parser_proto_goTypes,
		DependencyIndexes: file_ast_parser_proto_depIdxs,
		MessageInfos:      file_ast_parser_proto_msgTypes,
	}.Build()
	File_ast_parser_proto = out.File
	file_ast_parser_proto_rawDesc = nil
	file_ast_parser_proto_goTypes = nil
	file_ast_parser_proto_depIdxs = nil
}
