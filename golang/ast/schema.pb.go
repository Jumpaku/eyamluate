// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: ast/schema.proto

package ast

import (
	yaml "github.com/Jumpaku/eyamlate/golang/yaml"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Expr_Kind int32

const (
	Expr_UNSPECIFIED   Expr_Kind = 0
	Expr_EVAL          Expr_Kind = 1
	Expr_SCALAR        Expr_Kind = 2
	Expr_NEW_OBJ       Expr_Kind = 3
	Expr_NEW_ARR       Expr_Kind = 4
	Expr_VAL_JSON      Expr_Kind = 5
	Expr_RANGE_ITER    Expr_Kind = 6
	Expr_ELEM_ACCESS   Expr_Kind = 7
	Expr_FUN_CALL      Expr_Kind = 8
	Expr_CASE_BRANCHES Expr_Kind = 9
	Expr_OP_UNARY      Expr_Kind = 10
	Expr_OP_BINARY     Expr_Kind = 11
	Expr_OP_VARIADIC   Expr_Kind = 12
)

// Enum value maps for Expr_Kind.
var (
	Expr_Kind_name = map[int32]string{
		0:  "UNSPECIFIED",
		1:  "EVAL",
		2:  "SCALAR",
		3:  "NEW_OBJ",
		4:  "NEW_ARR",
		5:  "VAL_JSON",
		6:  "RANGE_ITER",
		7:  "ELEM_ACCESS",
		8:  "FUN_CALL",
		9:  "CASE_BRANCHES",
		10: "OP_UNARY",
		11: "OP_BINARY",
		12: "OP_VARIADIC",
	}
	Expr_Kind_value = map[string]int32{
		"UNSPECIFIED":   0,
		"EVAL":          1,
		"SCALAR":        2,
		"NEW_OBJ":       3,
		"NEW_ARR":       4,
		"VAL_JSON":      5,
		"RANGE_ITER":    6,
		"ELEM_ACCESS":   7,
		"FUN_CALL":      8,
		"CASE_BRANCHES": 9,
		"OP_UNARY":      10,
		"OP_BINARY":     11,
		"OP_VARIADIC":   12,
	}
)

func (x Expr_Kind) Enum() *Expr_Kind {
	p := new(Expr_Kind)
	*p = x
	return p
}

func (x Expr_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Expr_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_ast_schema_proto_enumTypes[0].Descriptor()
}

func (Expr_Kind) Type() protoreflect.EnumType {
	return &file_ast_schema_proto_enumTypes[0]
}

func (x Expr_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Expr_Kind.Descriptor instead.
func (Expr_Kind) EnumDescriptor() ([]byte, []int) {
	return file_ast_schema_proto_rawDescGZIP(), []int{3, 0}
}

type OpUnary_Operator int32

const (
	OpUnary_UNSPECIFIED OpUnary_Operator = 0
	OpUnary_LEN         OpUnary_Operator = 1
	OpUnary_NOT         OpUnary_Operator = 2
	OpUnary_HEAD        OpUnary_Operator = 3
	OpUnary_TAIL        OpUnary_Operator = 4
	OpUnary_LAST        OpUnary_Operator = 5
	OpUnary_INIT        OpUnary_Operator = 6
	OpUnary_FLAT        OpUnary_Operator = 7
	OpUnary_KEYS        OpUnary_Operator = 8
	OpUnary_ABORT       OpUnary_Operator = 9
)

// Enum value maps for OpUnary_Operator.
var (
	OpUnary_Operator_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "LEN",
		2: "NOT",
		3: "HEAD",
		4: "TAIL",
		5: "LAST",
		6: "INIT",
		7: "FLAT",
		8: "KEYS",
		9: "ABORT",
	}
	OpUnary_Operator_value = map[string]int32{
		"UNSPECIFIED": 0,
		"LEN":         1,
		"NOT":         2,
		"HEAD":        3,
		"TAIL":        4,
		"LAST":        5,
		"INIT":        6,
		"FLAT":        7,
		"KEYS":        8,
		"ABORT":       9,
	}
)

func (x OpUnary_Operator) Enum() *OpUnary_Operator {
	p := new(OpUnary_Operator)
	*p = x
	return p
}

func (x OpUnary_Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpUnary_Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_ast_schema_proto_enumTypes[1].Descriptor()
}

func (OpUnary_Operator) Type() protoreflect.EnumType {
	return &file_ast_schema_proto_enumTypes[1]
}

func (x OpUnary_Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpUnary_Operator.Descriptor instead.
func (OpUnary_Operator) EnumDescriptor() ([]byte, []int) {
	return file_ast_schema_proto_rawDescGZIP(), []int{12, 0}
}

type OpBinary_Operator int32

const (
	OpBinary_UNSPECIFIED OpBinary_Operator = 0
	OpBinary_SUB         OpBinary_Operator = 1
	OpBinary_DIV         OpBinary_Operator = 2
	OpBinary_MOD         OpBinary_Operator = 3
	OpBinary_EQ          OpBinary_Operator = 4
	OpBinary_NEQ         OpBinary_Operator = 5
	OpBinary_LT          OpBinary_Operator = 6
	OpBinary_LTE         OpBinary_Operator = 7
	OpBinary_GT          OpBinary_Operator = 8
	OpBinary_GTE         OpBinary_Operator = 9
	OpBinary_CMP         OpBinary_Operator = 10
)

// Enum value maps for OpBinary_Operator.
var (
	OpBinary_Operator_name = map[int32]string{
		0:  "UNSPECIFIED",
		1:  "SUB",
		2:  "DIV",
		3:  "MOD",
		4:  "EQ",
		5:  "NEQ",
		6:  "LT",
		7:  "LTE",
		8:  "GT",
		9:  "GTE",
		10: "CMP",
	}
	OpBinary_Operator_value = map[string]int32{
		"UNSPECIFIED": 0,
		"SUB":         1,
		"DIV":         2,
		"MOD":         3,
		"EQ":          4,
		"NEQ":         5,
		"LT":          6,
		"LTE":         7,
		"GT":          8,
		"GTE":         9,
		"CMP":         10,
	}
)

func (x OpBinary_Operator) Enum() *OpBinary_Operator {
	p := new(OpBinary_Operator)
	*p = x
	return p
}

func (x OpBinary_Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpBinary_Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_ast_schema_proto_enumTypes[2].Descriptor()
}

func (OpBinary_Operator) Type() protoreflect.EnumType {
	return &file_ast_schema_proto_enumTypes[2]
}

func (x OpBinary_Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpBinary_Operator.Descriptor instead.
func (OpBinary_Operator) EnumDescriptor() ([]byte, []int) {
	return file_ast_schema_proto_rawDescGZIP(), []int{13, 0}
}

type OpVariadic_Operator int32

const (
	OpVariadic_UNSPECIFIED OpVariadic_Operator = 0
	OpVariadic_ADD         OpVariadic_Operator = 1
	OpVariadic_MUL         OpVariadic_Operator = 2
	OpVariadic_AND         OpVariadic_Operator = 3
	OpVariadic_OR          OpVariadic_Operator = 4
	OpVariadic_CAT         OpVariadic_Operator = 5
	OpVariadic_MIN         OpVariadic_Operator = 6
	OpVariadic_MAX         OpVariadic_Operator = 7
	OpVariadic_MERGE       OpVariadic_Operator = 8
)

// Enum value maps for OpVariadic_Operator.
var (
	OpVariadic_Operator_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "ADD",
		2: "MUL",
		3: "AND",
		4: "OR",
		5: "CAT",
		6: "MIN",
		7: "MAX",
		8: "MERGE",
	}
	OpVariadic_Operator_value = map[string]int32{
		"UNSPECIFIED": 0,
		"ADD":         1,
		"MUL":         2,
		"AND":         3,
		"OR":          4,
		"CAT":         5,
		"MIN":         6,
		"MAX":         7,
		"MERGE":       8,
	}
)

func (x OpVariadic_Operator) Enum() *OpVariadic_Operator {
	p := new(OpVariadic_Operator)
	*p = x
	return p
}

func (x OpVariadic_Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpVariadic_Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_ast_schema_proto_enumTypes[3].Descriptor()
}

func (OpVariadic_Operator) Type() protoreflect.EnumType {
	return &file_ast_schema_proto_enumTypes[3]
}

func (x OpVariadic_Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpVariadic_Operator.Descriptor instead.
func (OpVariadic_Operator) EnumDescriptor() ([]byte, []int) {
	return file_ast_schema_proto_rawDescGZIP(), []int{14, 0}
}

type Path struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pos []*Path_Pos `protobuf:"bytes,1,rep,name=pos,proto3" json:"pos,omitempty"`
}

func (x *Path) Reset() {
	*x = Path{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ast_schema_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Path) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Path) ProtoMessage() {}

func (x *Path) ProtoReflect() protoreflect.Message {
	mi := &file_ast_schema_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Path.ProtoReflect.Descriptor instead.
func (*Path) Descriptor() ([]byte, []int) {
	return file_ast_schema_proto_rawDescGZIP(), []int{0}
}

func (x *Path) GetPos() []*Path_Pos {
	if x != nil {
		return x.Pos
	}
	return nil
}

type Eval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Where []*FunDef `protobuf:"bytes,1,rep,name=where,proto3" json:"where,omitempty"`
	Eval  *Expr     `protobuf:"bytes,2,opt,name=eval,proto3" json:"eval,omitempty"`
}

func (x *Eval) Reset() {
	*x = Eval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ast_schema_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Eval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Eval) ProtoMessage() {}

func (x *Eval) ProtoReflect() protoreflect.Message {
	mi := &file_ast_schema_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Eval.ProtoReflect.Descriptor instead.
func (*Eval) Descriptor() ([]byte, []int) {
	return file_ast_schema_proto_rawDescGZIP(), []int{1}
}

func (x *Eval) GetWhere() []*FunDef {
	if x != nil {
		return x.Where
	}
	return nil
}

func (x *Eval) GetEval() *Expr {
	if x != nil {
		return x.Eval
	}
	return nil
}

type FunDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Def   string   `protobuf:"bytes,1,opt,name=def,proto3" json:"def,omitempty"`
	Value *Expr    `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	With  []string `protobuf:"bytes,3,rep,name=with,proto3" json:"with,omitempty"`
	Path  *Path    `protobuf:"bytes,20,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *FunDef) Reset() {
	*x = FunDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ast_schema_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunDef) ProtoMessage() {}

func (x *FunDef) ProtoReflect() protoreflect.Message {
	mi := &file_ast_schema_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunDef.ProtoReflect.Descriptor instead.
func (*FunDef) Descriptor() ([]byte, []int) {
	return file_ast_schema_proto_rawDescGZIP(), []int{2}
}

func (x *FunDef) GetDef() string {
	if x != nil {
		return x.Def
	}
	return ""
}

func (x *FunDef) GetValue() *Expr {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *FunDef) GetWith() []string {
	if x != nil {
		return x.With
	}
	return nil
}

func (x *FunDef) GetPath() *Path {
	if x != nil {
		return x.Path
	}
	return nil
}

type Expr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind         Expr_Kind     `protobuf:"varint,1,opt,name=kind,proto3,enum=ast.Expr_Kind" json:"kind,omitempty"`
	Eval         *Eval         `protobuf:"bytes,2,opt,name=eval,proto3" json:"eval,omitempty"`
	Scalar       *Scalar       `protobuf:"bytes,3,opt,name=scalar,proto3" json:"scalar,omitempty"`
	NewObj       *NewObj       `protobuf:"bytes,4,opt,name=new_obj,json=newObj,proto3" json:"new_obj,omitempty"`
	NewArr       *NewArr       `protobuf:"bytes,5,opt,name=new_arr,json=newArr,proto3" json:"new_arr,omitempty"`
	ValJson      *ValJson      `protobuf:"bytes,6,opt,name=val_json,json=valJson,proto3" json:"val_json,omitempty"`
	RangeIter    *RangeIter    `protobuf:"bytes,7,opt,name=range_iter,json=rangeIter,proto3" json:"range_iter,omitempty"`
	ElemAccess   *ElemAccess   `protobuf:"bytes,8,opt,name=elem_access,json=elemAccess,proto3" json:"elem_access,omitempty"`
	FunCall      *FunCall      `protobuf:"bytes,9,opt,name=fun_call,json=funCall,proto3" json:"fun_call,omitempty"`
	CaseBranches *CaseBranches `protobuf:"bytes,10,opt,name=case_branches,json=caseBranches,proto3" json:"case_branches,omitempty"`
	OpUnary      *OpUnary      `protobuf:"bytes,11,opt,name=op_unary,json=opUnary,proto3" json:"op_unary,omitempty"`
	OpBinary     *OpBinary     `protobuf:"bytes,12,opt,name=op_binary,json=opBinary,proto3" json:"op_binary,omitempty"`
	OpVariadic   *OpVariadic   `protobuf:"bytes,13,opt,name=op_variadic,json=opVariadic,proto3" json:"op_variadic,omitempty"`
	Path         *Path         `protobuf:"bytes,20,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *Expr) Reset() {
	*x = Expr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ast_schema_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr) ProtoMessage() {}

func (x *Expr) ProtoReflect() protoreflect.Message {
	mi := &file_ast_schema_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr.ProtoReflect.Descriptor instead.
func (*Expr) Descriptor() ([]byte, []int) {
	return file_ast_schema_proto_rawDescGZIP(), []int{3}
}

func (x *Expr) GetKind() Expr_Kind {
	if x != nil {
		return x.Kind
	}
	return Expr_UNSPECIFIED
}

func (x *Expr) GetEval() *Eval {
	if x != nil {
		return x.Eval
	}
	return nil
}

func (x *Expr) GetScalar() *Scalar {
	if x != nil {
		return x.Scalar
	}
	return nil
}

func (x *Expr) GetNewObj() *NewObj {
	if x != nil {
		return x.NewObj
	}
	return nil
}

func (x *Expr) GetNewArr() *NewArr {
	if x != nil {
		return x.NewArr
	}
	return nil
}

func (x *Expr) GetValJson() *ValJson {
	if x != nil {
		return x.ValJson
	}
	return nil
}

func (x *Expr) GetRangeIter() *RangeIter {
	if x != nil {
		return x.RangeIter
	}
	return nil
}

func (x *Expr) GetElemAccess() *ElemAccess {
	if x != nil {
		return x.ElemAccess
	}
	return nil
}

func (x *Expr) GetFunCall() *FunCall {
	if x != nil {
		return x.FunCall
	}
	return nil
}

func (x *Expr) GetCaseBranches() *CaseBranches {
	if x != nil {
		return x.CaseBranches
	}
	return nil
}

func (x *Expr) GetOpUnary() *OpUnary {
	if x != nil {
		return x.OpUnary
	}
	return nil
}

func (x *Expr) GetOpBinary() *OpBinary {
	if x != nil {
		return x.OpBinary
	}
	return nil
}

func (x *Expr) GetOpVariadic() *OpVariadic {
	if x != nil {
		return x.OpVariadic
	}
	return nil
}

func (x *Expr) GetPath() *Path {
	if x != nil {
		return x.Path
	}
	return nil
}

type Scalar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Val *yaml.Value `protobuf:"bytes,1,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *Scalar) Reset() {
	*x = Scalar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ast_schema_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scalar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scalar) ProtoMessage() {}

func (x *Scalar) ProtoReflect() protoreflect.Message {
	mi := &file_ast_schema_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scalar.ProtoReflect.Descriptor instead.
func (*Scalar) Descriptor() ([]byte, []int) {
	return file_ast_schema_proto_rawDescGZIP(), []int{4}
}

func (x *Scalar) GetVal() *yaml.Value {
	if x != nil {
		return x.Val
	}
	return nil
}

type NewObj struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Obj map[string]*Expr `protobuf:"bytes,1,rep,name=obj,proto3" json:"obj,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NewObj) Reset() {
	*x = NewObj{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ast_schema_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewObj) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewObj) ProtoMessage() {}

func (x *NewObj) ProtoReflect() protoreflect.Message {
	mi := &file_ast_schema_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewObj.ProtoReflect.Descriptor instead.
func (*NewObj) Descriptor() ([]byte, []int) {
	return file_ast_schema_proto_rawDescGZIP(), []int{5}
}

func (x *NewObj) GetObj() map[string]*Expr {
	if x != nil {
		return x.Obj
	}
	return nil
}

type NewArr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arr []*Expr `protobuf:"bytes,1,rep,name=arr,proto3" json:"arr,omitempty"`
}

func (x *NewArr) Reset() {
	*x = NewArr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ast_schema_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewArr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewArr) ProtoMessage() {}

func (x *NewArr) ProtoReflect() protoreflect.Message {
	mi := &file_ast_schema_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewArr.ProtoReflect.Descriptor instead.
func (*NewArr) Descriptor() ([]byte, []int) {
	return file_ast_schema_proto_rawDescGZIP(), []int{6}
}

func (x *NewArr) GetArr() []*Expr {
	if x != nil {
		return x.Arr
	}
	return nil
}

type ValJson struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Json *yaml.Value `protobuf:"bytes,1,opt,name=json,proto3" json:"json,omitempty"`
}

func (x *ValJson) Reset() {
	*x = ValJson{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ast_schema_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValJson) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValJson) ProtoMessage() {}

func (x *ValJson) ProtoReflect() protoreflect.Message {
	mi := &file_ast_schema_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValJson.ProtoReflect.Descriptor instead.
func (*ValJson) Descriptor() ([]byte, []int) {
	return file_ast_schema_proto_rawDescGZIP(), []int{7}
}

func (x *ValJson) GetJson() *yaml.Value {
	if x != nil {
		return x.Json
	}
	return nil
}

type RangeIter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ForPos string `protobuf:"bytes,1,opt,name=for_pos,json=forPos,proto3" json:"for_pos,omitempty"`
	ForVal string `protobuf:"bytes,2,opt,name=for_val,json=forVal,proto3" json:"for_val,omitempty"`
	In     *Expr  `protobuf:"bytes,3,opt,name=in,proto3" json:"in,omitempty"`
	Do     *Expr  `protobuf:"bytes,4,opt,name=do,proto3" json:"do,omitempty"`
	If     *Expr  `protobuf:"bytes,5,opt,name=if,proto3" json:"if,omitempty"`
}

func (x *RangeIter) Reset() {
	*x = RangeIter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ast_schema_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RangeIter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangeIter) ProtoMessage() {}

func (x *RangeIter) ProtoReflect() protoreflect.Message {
	mi := &file_ast_schema_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangeIter.ProtoReflect.Descriptor instead.
func (*RangeIter) Descriptor() ([]byte, []int) {
	return file_ast_schema_proto_rawDescGZIP(), []int{8}
}

func (x *RangeIter) GetForPos() string {
	if x != nil {
		return x.ForPos
	}
	return ""
}

func (x *RangeIter) GetForVal() string {
	if x != nil {
		return x.ForVal
	}
	return ""
}

func (x *RangeIter) GetIn() *Expr {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *RangeIter) GetDo() *Expr {
	if x != nil {
		return x.Do
	}
	return nil
}

func (x *RangeIter) GetIf() *Expr {
	if x != nil {
		return x.If
	}
	return nil
}

type ElemAccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Get  *Expr `protobuf:"bytes,1,opt,name=get,proto3" json:"get,omitempty"`
	From *Expr `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
}

func (x *ElemAccess) Reset() {
	*x = ElemAccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ast_schema_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElemAccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElemAccess) ProtoMessage() {}

func (x *ElemAccess) ProtoReflect() protoreflect.Message {
	mi := &file_ast_schema_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElemAccess.ProtoReflect.Descriptor instead.
func (*ElemAccess) Descriptor() ([]byte, []int) {
	return file_ast_schema_proto_rawDescGZIP(), []int{9}
}

func (x *ElemAccess) GetGet() *Expr {
	if x != nil {
		return x.Get
	}
	return nil
}

func (x *ElemAccess) GetFrom() *Expr {
	if x != nil {
		return x.From
	}
	return nil
}

type FunCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ref  string           `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	With map[string]*Expr `protobuf:"bytes,2,rep,name=with,proto3" json:"with,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FunCall) Reset() {
	*x = FunCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ast_schema_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunCall) ProtoMessage() {}

func (x *FunCall) ProtoReflect() protoreflect.Message {
	mi := &file_ast_schema_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunCall.ProtoReflect.Descriptor instead.
func (*FunCall) Descriptor() ([]byte, []int) {
	return file_ast_schema_proto_rawDescGZIP(), []int{10}
}

func (x *FunCall) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

func (x *FunCall) GetWith() map[string]*Expr {
	if x != nil {
		return x.With
	}
	return nil
}

type CaseBranches struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Branches []*CaseBranches_Branch `protobuf:"bytes,1,rep,name=branches,proto3" json:"branches,omitempty"`
}

func (x *CaseBranches) Reset() {
	*x = CaseBranches{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ast_schema_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaseBranches) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaseBranches) ProtoMessage() {}

func (x *CaseBranches) ProtoReflect() protoreflect.Message {
	mi := &file_ast_schema_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaseBranches.ProtoReflect.Descriptor instead.
func (*CaseBranches) Descriptor() ([]byte, []int) {
	return file_ast_schema_proto_rawDescGZIP(), []int{11}
}

func (x *CaseBranches) GetBranches() []*CaseBranches_Branch {
	if x != nil {
		return x.Branches
	}
	return nil
}

type OpUnary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator OpUnary_Operator `protobuf:"varint,1,opt,name=operator,proto3,enum=ast.OpUnary_Operator" json:"operator,omitempty"`
	Operand  *Expr            `protobuf:"bytes,2,opt,name=operand,proto3" json:"operand,omitempty"`
}

func (x *OpUnary) Reset() {
	*x = OpUnary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ast_schema_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpUnary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpUnary) ProtoMessage() {}

func (x *OpUnary) ProtoReflect() protoreflect.Message {
	mi := &file_ast_schema_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpUnary.ProtoReflect.Descriptor instead.
func (*OpUnary) Descriptor() ([]byte, []int) {
	return file_ast_schema_proto_rawDescGZIP(), []int{12}
}

func (x *OpUnary) GetOperator() OpUnary_Operator {
	if x != nil {
		return x.Operator
	}
	return OpUnary_UNSPECIFIED
}

func (x *OpUnary) GetOperand() *Expr {
	if x != nil {
		return x.Operand
	}
	return nil
}

type OpBinary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator     OpBinary_Operator `protobuf:"varint,1,opt,name=operator,proto3,enum=ast.OpBinary_Operator" json:"operator,omitempty"`
	OperandLeft  *Expr             `protobuf:"bytes,2,opt,name=operand_left,json=operandLeft,proto3" json:"operand_left,omitempty"`
	OperandRight *Expr             `protobuf:"bytes,3,opt,name=operand_right,json=operandRight,proto3" json:"operand_right,omitempty"`
}

func (x *OpBinary) Reset() {
	*x = OpBinary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ast_schema_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpBinary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpBinary) ProtoMessage() {}

func (x *OpBinary) ProtoReflect() protoreflect.Message {
	mi := &file_ast_schema_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpBinary.ProtoReflect.Descriptor instead.
func (*OpBinary) Descriptor() ([]byte, []int) {
	return file_ast_schema_proto_rawDescGZIP(), []int{13}
}

func (x *OpBinary) GetOperator() OpBinary_Operator {
	if x != nil {
		return x.Operator
	}
	return OpBinary_UNSPECIFIED
}

func (x *OpBinary) GetOperandLeft() *Expr {
	if x != nil {
		return x.OperandLeft
	}
	return nil
}

func (x *OpBinary) GetOperandRight() *Expr {
	if x != nil {
		return x.OperandRight
	}
	return nil
}

type OpVariadic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator OpVariadic_Operator `protobuf:"varint,1,opt,name=operator,proto3,enum=ast.OpVariadic_Operator" json:"operator,omitempty"`
	Operands []*Expr             `protobuf:"bytes,2,rep,name=operands,proto3" json:"operands,omitempty"`
}

func (x *OpVariadic) Reset() {
	*x = OpVariadic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ast_schema_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpVariadic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpVariadic) ProtoMessage() {}

func (x *OpVariadic) ProtoReflect() protoreflect.Message {
	mi := &file_ast_schema_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpVariadic.ProtoReflect.Descriptor instead.
func (*OpVariadic) Descriptor() ([]byte, []int) {
	return file_ast_schema_proto_rawDescGZIP(), []int{14}
}

func (x *OpVariadic) GetOperator() OpVariadic_Operator {
	if x != nil {
		return x.Operator
	}
	return OpVariadic_UNSPECIFIED
}

func (x *OpVariadic) GetOperands() []*Expr {
	if x != nil {
		return x.Operands
	}
	return nil
}

type Path_Pos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index int64  `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Key   string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *Path_Pos) Reset() {
	*x = Path_Pos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ast_schema_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Path_Pos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Path_Pos) ProtoMessage() {}

func (x *Path_Pos) ProtoReflect() protoreflect.Message {
	mi := &file_ast_schema_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Path_Pos.ProtoReflect.Descriptor instead.
func (*Path_Pos) Descriptor() ([]byte, []int) {
	return file_ast_schema_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Path_Pos) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Path_Pos) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type CaseBranches_Branch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOtherwise bool  `protobuf:"varint,1,opt,name=is_otherwise,json=isOtherwise,proto3" json:"is_otherwise,omitempty"`
	When        *Expr `protobuf:"bytes,2,opt,name=when,proto3" json:"when,omitempty"`
	Then        *Expr `protobuf:"bytes,3,opt,name=then,proto3" json:"then,omitempty"`
	Otherwise   *Expr `protobuf:"bytes,4,opt,name=otherwise,proto3" json:"otherwise,omitempty"`
}

func (x *CaseBranches_Branch) Reset() {
	*x = CaseBranches_Branch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ast_schema_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaseBranches_Branch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaseBranches_Branch) ProtoMessage() {}

func (x *CaseBranches_Branch) ProtoReflect() protoreflect.Message {
	mi := &file_ast_schema_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaseBranches_Branch.ProtoReflect.Descriptor instead.
func (*CaseBranches_Branch) Descriptor() ([]byte, []int) {
	return file_ast_schema_proto_rawDescGZIP(), []int{11, 0}
}

func (x *CaseBranches_Branch) GetIsOtherwise() bool {
	if x != nil {
		return x.IsOtherwise
	}
	return false
}

func (x *CaseBranches_Branch) GetWhen() *Expr {
	if x != nil {
		return x.When
	}
	return nil
}

func (x *CaseBranches_Branch) GetThen() *Expr {
	if x != nil {
		return x.Then
	}
	return nil
}

func (x *CaseBranches_Branch) GetOtherwise() *Expr {
	if x != nil {
		return x.Otherwise
	}
	return nil
}

var File_ast_schema_proto protoreflect.FileDescriptor

var file_ast_schema_proto_rawDesc = []byte{
	0x0a, 0x10, 0x61, 0x73, 0x74, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x03, 0x61, 0x73, 0x74, 0x1a, 0x10, 0x79, 0x61, 0x6d, 0x6c, 0x2f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x56, 0x0a, 0x04, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x1f, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x03, 0x70,
	0x6f, 0x73, 0x1a, 0x2d, 0x0a, 0x03, 0x50, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x22, 0x48, 0x0a, 0x04, 0x45, 0x76, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x05, 0x77, 0x68, 0x65,
	0x72, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x46,
	0x75, 0x6e, 0x44, 0x65, 0x66, 0x52, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x04,
	0x65, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x73, 0x74,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x65, 0x76, 0x61, 0x6c, 0x22, 0x6e, 0x0a, 0x06, 0x46,
	0x75, 0x6e, 0x44, 0x65, 0x66, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x64, 0x65, 0x66, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x69, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x77, 0x69, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x73, 0x74,
	0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x93, 0x06, 0x0a, 0x04,
	0x45, 0x78, 0x70, 0x72, 0x12, 0x22, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x4b, 0x69,
	0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x04, 0x65, 0x76, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x45, 0x76, 0x61,
	0x6c, 0x52, 0x04, 0x65, 0x76, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x06, 0x73, 0x63, 0x61, 0x6c, 0x61,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x53, 0x63,
	0x61, 0x6c, 0x61, 0x72, 0x52, 0x06, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x12, 0x24, 0x0a, 0x07,
	0x6e, 0x65, 0x77, 0x5f, 0x6f, 0x62, 0x6a, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x77, 0x4f, 0x62, 0x6a, 0x52, 0x06, 0x6e, 0x65, 0x77, 0x4f,
	0x62, 0x6a, 0x12, 0x24, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x5f, 0x61, 0x72, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x77, 0x41, 0x72, 0x72,
	0x52, 0x06, 0x6e, 0x65, 0x77, 0x41, 0x72, 0x72, 0x12, 0x27, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x5f,
	0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x73, 0x74,
	0x2e, 0x56, 0x61, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x61, 0x6c, 0x4a, 0x73, 0x6f,
	0x6e, 0x12, 0x2d, 0x0a, 0x0a, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x49, 0x74, 0x65, 0x72, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x74, 0x65, 0x72,
	0x12, 0x30, 0x0a, 0x0b, 0x65, 0x6c, 0x65, 0x6d, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x45, 0x6c, 0x65, 0x6d,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x0a, 0x65, 0x6c, 0x65, 0x6d, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x27, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x46, 0x75, 0x6e, 0x43, 0x61,
	0x6c, 0x6c, 0x52, 0x07, 0x66, 0x75, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x36, 0x0a, 0x0d, 0x63,
	0x61, 0x73, 0x65, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x65, 0x73, 0x52, 0x0c, 0x63, 0x61, 0x73, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x08, 0x6f, 0x70, 0x5f, 0x75, 0x6e, 0x61, 0x72, 0x79, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4f, 0x70, 0x55, 0x6e,
	0x61, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x70, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x09,
	0x6f, 0x70, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4f, 0x70, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x08,
	0x6f, 0x70, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x30, 0x0a, 0x0b, 0x6f, 0x70, 0x5f, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x64, 0x69, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x4f, 0x70, 0x56, 0x61, 0x72, 0x69, 0x61, 0x64, 0x69, 0x63, 0x52, 0x0a,
	0x6f, 0x70, 0x56, 0x61, 0x72, 0x69, 0x61, 0x64, 0x69, 0x63, 0x12, 0x1d, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x50,
	0x61, 0x74, 0x68, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0xc5, 0x01, 0x0a, 0x04, 0x4b, 0x69,
	0x6e, 0x64, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x56, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x43, 0x41, 0x4c, 0x41, 0x52, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x45, 0x57,
	0x5f, 0x4f, 0x42, 0x4a, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x45, 0x57, 0x5f, 0x41, 0x52,
	0x52, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x41, 0x4c, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x10,
	0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x52, 0x10,
	0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x4c, 0x45, 0x4d, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x55, 0x4e, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x08,
	0x12, 0x11, 0x0a, 0x0d, 0x43, 0x41, 0x53, 0x45, 0x5f, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x45,
	0x53, 0x10, 0x09, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x50, 0x5f, 0x55, 0x4e, 0x41, 0x52, 0x59, 0x10,
	0x0a, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x50, 0x5f, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x0b,
	0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x50, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x41, 0x44, 0x49, 0x43, 0x10,
	0x0c, 0x22, 0x27, 0x0a, 0x06, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x12, 0x1d, 0x0a, 0x03, 0x76,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x61, 0x6d, 0x6c, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x22, 0x73, 0x0a, 0x06, 0x4e, 0x65,
	0x77, 0x4f, 0x62, 0x6a, 0x12, 0x26, 0x0a, 0x03, 0x6f, 0x62, 0x6a, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x65, 0x77, 0x4f, 0x62, 0x6a, 0x2e, 0x4f,
	0x62, 0x6a, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x6f, 0x62, 0x6a, 0x1a, 0x41, 0x0a, 0x08,
	0x4f, 0x62, 0x6a, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x73, 0x74, 0x2e,
	0x45, 0x78, 0x70, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x25, 0x0a, 0x06, 0x4e, 0x65, 0x77, 0x41, 0x72, 0x72, 0x12, 0x1b, 0x0a, 0x03, 0x61, 0x72, 0x72,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x52, 0x03, 0x61, 0x72, 0x72, 0x22, 0x2a, 0x0a, 0x07, 0x56, 0x61, 0x6c, 0x4a, 0x73, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x79, 0x61, 0x6d, 0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6a, 0x73,
	0x6f, 0x6e, 0x22, 0x8e, 0x01, 0x0a, 0x09, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x74, 0x65, 0x72,
	0x12, 0x17, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x50, 0x6f, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x6f, 0x72,
	0x5f, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x56,
	0x61, 0x6c, 0x12, 0x19, 0x0a, 0x02, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x61, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x02, 0x69, 0x6e, 0x12, 0x19, 0x0a,
	0x02, 0x64, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x73, 0x74, 0x2e,
	0x45, 0x78, 0x70, 0x72, 0x52, 0x02, 0x64, 0x6f, 0x12, 0x19, 0x0a, 0x02, 0x69, 0x66, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52,
	0x02, 0x69, 0x66, 0x22, 0x48, 0x0a, 0x0a, 0x45, 0x6c, 0x65, 0x6d, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x1b, 0x0a, 0x03, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x61, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x03, 0x67, 0x65, 0x74, 0x12, 0x1d,
	0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61,
	0x73, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x22, 0x8b, 0x01,
	0x0a, 0x07, 0x46, 0x75, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x66,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x2a, 0x0a, 0x04, 0x77,
	0x69, 0x74, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x73, 0x74, 0x2e,
	0x46, 0x75, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x04, 0x77, 0x69, 0x74, 0x68, 0x1a, 0x42, 0x0a, 0x09, 0x57, 0x69, 0x74, 0x68, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd9, 0x01, 0x0a, 0x0c,
	0x43, 0x61, 0x73, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x08,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x61, 0x73, 0x74, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65,
	0x73, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x65, 0x73, 0x1a, 0x92, 0x01, 0x0a, 0x06, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x73, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x77, 0x69, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x77, 0x69, 0x73, 0x65,
	0x12, 0x1d, 0x0a, 0x04, 0x77, 0x68, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x61, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x77, 0x68, 0x65, 0x6e, 0x12,
	0x1d, 0x0a, 0x04, 0x74, 0x68, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x74, 0x68, 0x65, 0x6e, 0x12, 0x27,
	0x0a, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x77, 0x69, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x09, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x77, 0x69, 0x73, 0x65, 0x22, 0xd7, 0x01, 0x0a, 0x07, 0x4f, 0x70, 0x55, 0x6e,
	0x61, 0x72, 0x79, 0x12, 0x31, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4f, 0x70, 0x55, 0x6e,
	0x61, 0x72, 0x79, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x22, 0x74, 0x0a, 0x08, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x45, 0x4e, 0x10,
	0x01, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x4f, 0x54, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x45,
	0x41, 0x44, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x41, 0x49, 0x4c, 0x10, 0x04, 0x12, 0x08,
	0x0a, 0x04, 0x4c, 0x41, 0x53, 0x54, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e, 0x49, 0x54,
	0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x4c, 0x41, 0x54, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04,
	0x4b, 0x45, 0x59, 0x53, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x10,
	0x09, 0x22, 0x90, 0x02, 0x0a, 0x08, 0x4f, 0x70, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x32,
	0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4f, 0x70, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6c, 0x65,
	0x66, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x65, 0x66, 0x74,
	0x12, 0x2e, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74,
	0x22, 0x72, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x0f, 0x0a, 0x0b,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x53, 0x55, 0x42, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x49, 0x56, 0x10, 0x02, 0x12,
	0x07, 0x0a, 0x03, 0x4d, 0x4f, 0x44, 0x10, 0x03, 0x12, 0x06, 0x0a, 0x02, 0x45, 0x51, 0x10, 0x04,
	0x12, 0x07, 0x0a, 0x03, 0x4e, 0x45, 0x51, 0x10, 0x05, 0x12, 0x06, 0x0a, 0x02, 0x4c, 0x54, 0x10,
	0x06, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x54, 0x45, 0x10, 0x07, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x54,
	0x10, 0x08, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x54, 0x45, 0x10, 0x09, 0x12, 0x07, 0x0a, 0x03, 0x43,
	0x4d, 0x50, 0x10, 0x0a, 0x22, 0xcf, 0x01, 0x0a, 0x0a, 0x4f, 0x70, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x64, 0x69, 0x63, 0x12, 0x34, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4f, 0x70, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x64, 0x69, 0x63, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x73,
	0x22, 0x64, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x0f, 0x0a, 0x0b,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x41, 0x44, 0x44, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x55, 0x4c, 0x10, 0x02, 0x12,
	0x07, 0x0a, 0x03, 0x41, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x52, 0x10, 0x04,
	0x12, 0x07, 0x0a, 0x03, 0x43, 0x41, 0x54, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x49, 0x4e,
	0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x41, 0x58, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x4d,
	0x45, 0x52, 0x47, 0x45, 0x10, 0x08, 0x42, 0x28, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4a, 0x75, 0x6d, 0x70, 0x61, 0x6b, 0x75, 0x2f, 0x65, 0x79, 0x61,
	0x6d, 0x6c, 0x61, 0x74, 0x65, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x61, 0x73, 0x74,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ast_schema_proto_rawDescOnce sync.Once
	file_ast_schema_proto_rawDescData = file_ast_schema_proto_rawDesc
)

func file_ast_schema_proto_rawDescGZIP() []byte {
	file_ast_schema_proto_rawDescOnce.Do(func() {
		file_ast_schema_proto_rawDescData = protoimpl.X.CompressGZIP(file_ast_schema_proto_rawDescData)
	})
	return file_ast_schema_proto_rawDescData
}

var file_ast_schema_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_ast_schema_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_ast_schema_proto_goTypes = []any{
	(Expr_Kind)(0),              // 0: ast.Expr.Kind
	(OpUnary_Operator)(0),       // 1: ast.OpUnary.Operator
	(OpBinary_Operator)(0),      // 2: ast.OpBinary.Operator
	(OpVariadic_Operator)(0),    // 3: ast.OpVariadic.Operator
	(*Path)(nil),                // 4: ast.Path
	(*Eval)(nil),                // 5: ast.Eval
	(*FunDef)(nil),              // 6: ast.FunDef
	(*Expr)(nil),                // 7: ast.Expr
	(*Scalar)(nil),              // 8: ast.Scalar
	(*NewObj)(nil),              // 9: ast.NewObj
	(*NewArr)(nil),              // 10: ast.NewArr
	(*ValJson)(nil),             // 11: ast.ValJson
	(*RangeIter)(nil),           // 12: ast.RangeIter
	(*ElemAccess)(nil),          // 13: ast.ElemAccess
	(*FunCall)(nil),             // 14: ast.FunCall
	(*CaseBranches)(nil),        // 15: ast.CaseBranches
	(*OpUnary)(nil),             // 16: ast.OpUnary
	(*OpBinary)(nil),            // 17: ast.OpBinary
	(*OpVariadic)(nil),          // 18: ast.OpVariadic
	(*Path_Pos)(nil),            // 19: ast.Path.Pos
	nil,                         // 20: ast.NewObj.ObjEntry
	nil,                         // 21: ast.FunCall.WithEntry
	(*CaseBranches_Branch)(nil), // 22: ast.CaseBranches.Branch
	(*yaml.Value)(nil),          // 23: yaml.Value
}
var file_ast_schema_proto_depIdxs = []int32{
	19, // 0: ast.Path.pos:type_name -> ast.Path.Pos
	6,  // 1: ast.Eval.where:type_name -> ast.FunDef
	7,  // 2: ast.Eval.eval:type_name -> ast.Expr
	7,  // 3: ast.FunDef.value:type_name -> ast.Expr
	4,  // 4: ast.FunDef.path:type_name -> ast.Path
	0,  // 5: ast.Expr.kind:type_name -> ast.Expr.Kind
	5,  // 6: ast.Expr.eval:type_name -> ast.Eval
	8,  // 7: ast.Expr.scalar:type_name -> ast.Scalar
	9,  // 8: ast.Expr.new_obj:type_name -> ast.NewObj
	10, // 9: ast.Expr.new_arr:type_name -> ast.NewArr
	11, // 10: ast.Expr.val_json:type_name -> ast.ValJson
	12, // 11: ast.Expr.range_iter:type_name -> ast.RangeIter
	13, // 12: ast.Expr.elem_access:type_name -> ast.ElemAccess
	14, // 13: ast.Expr.fun_call:type_name -> ast.FunCall
	15, // 14: ast.Expr.case_branches:type_name -> ast.CaseBranches
	16, // 15: ast.Expr.op_unary:type_name -> ast.OpUnary
	17, // 16: ast.Expr.op_binary:type_name -> ast.OpBinary
	18, // 17: ast.Expr.op_variadic:type_name -> ast.OpVariadic
	4,  // 18: ast.Expr.path:type_name -> ast.Path
	23, // 19: ast.Scalar.val:type_name -> yaml.Value
	20, // 20: ast.NewObj.obj:type_name -> ast.NewObj.ObjEntry
	7,  // 21: ast.NewArr.arr:type_name -> ast.Expr
	23, // 22: ast.ValJson.json:type_name -> yaml.Value
	7,  // 23: ast.RangeIter.in:type_name -> ast.Expr
	7,  // 24: ast.RangeIter.do:type_name -> ast.Expr
	7,  // 25: ast.RangeIter.if:type_name -> ast.Expr
	7,  // 26: ast.ElemAccess.get:type_name -> ast.Expr
	7,  // 27: ast.ElemAccess.from:type_name -> ast.Expr
	21, // 28: ast.FunCall.with:type_name -> ast.FunCall.WithEntry
	22, // 29: ast.CaseBranches.branches:type_name -> ast.CaseBranches.Branch
	1,  // 30: ast.OpUnary.operator:type_name -> ast.OpUnary.Operator
	7,  // 31: ast.OpUnary.operand:type_name -> ast.Expr
	2,  // 32: ast.OpBinary.operator:type_name -> ast.OpBinary.Operator
	7,  // 33: ast.OpBinary.operand_left:type_name -> ast.Expr
	7,  // 34: ast.OpBinary.operand_right:type_name -> ast.Expr
	3,  // 35: ast.OpVariadic.operator:type_name -> ast.OpVariadic.Operator
	7,  // 36: ast.OpVariadic.operands:type_name -> ast.Expr
	7,  // 37: ast.NewObj.ObjEntry.value:type_name -> ast.Expr
	7,  // 38: ast.FunCall.WithEntry.value:type_name -> ast.Expr
	7,  // 39: ast.CaseBranches.Branch.when:type_name -> ast.Expr
	7,  // 40: ast.CaseBranches.Branch.then:type_name -> ast.Expr
	7,  // 41: ast.CaseBranches.Branch.otherwise:type_name -> ast.Expr
	42, // [42:42] is the sub-list for method output_type
	42, // [42:42] is the sub-list for method input_type
	42, // [42:42] is the sub-list for extension type_name
	42, // [42:42] is the sub-list for extension extendee
	0,  // [0:42] is the sub-list for field type_name
}

func init() { file_ast_schema_proto_init() }
func file_ast_schema_proto_init() {
	if File_ast_schema_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ast_schema_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Path); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ast_schema_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Eval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ast_schema_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*FunDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ast_schema_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*Expr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ast_schema_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*Scalar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ast_schema_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*NewObj); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ast_schema_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*NewArr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ast_schema_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ValJson); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ast_schema_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*RangeIter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ast_schema_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*ElemAccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ast_schema_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*FunCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ast_schema_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*CaseBranches); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ast_schema_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*OpUnary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ast_schema_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*OpBinary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ast_schema_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*OpVariadic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ast_schema_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*Path_Pos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ast_schema_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*CaseBranches_Branch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ast_schema_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ast_schema_proto_goTypes,
		DependencyIndexes: file_ast_schema_proto_depIdxs,
		EnumInfos:         file_ast_schema_proto_enumTypes,
		MessageInfos:      file_ast_schema_proto_msgTypes,
	}.Build()
	File_ast_schema_proto = out.File
	file_ast_schema_proto_rawDesc = nil
	file_ast_schema_proto_goTypes = nil
	file_ast_schema_proto_depIdxs = nil
}
