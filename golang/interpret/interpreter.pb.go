// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: interpret/interpreter.proto

package interpret

import (
	yaml "github.com/Jumpaku/eyamlate/golang/yaml"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type InterpretOutput_Status int32

const (
	InterpretOutput_OK             InterpretOutput_Status = 0
	InterpretOutput_DECODE_ERROR   InterpretOutput_Status = 1
	InterpretOutput_VALIDATE_ERROR InterpretOutput_Status = 2
	InterpretOutput_EXPR_ERROR     InterpretOutput_Status = 3
)

// Enum value maps for InterpretOutput_Status.
var (
	InterpretOutput_Status_name = map[int32]string{
		0: "OK",
		1: "DECODE_ERROR",
		2: "VALIDATE_ERROR",
		3: "EXPR_ERROR",
	}
	InterpretOutput_Status_value = map[string]int32{
		"OK":             0,
		"DECODE_ERROR":   1,
		"VALIDATE_ERROR": 2,
		"EXPR_ERROR":     3,
	}
)

func (x InterpretOutput_Status) Enum() *InterpretOutput_Status {
	p := new(InterpretOutput_Status)
	*p = x
	return p
}

func (x InterpretOutput_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InterpretOutput_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_interpret_interpreter_proto_enumTypes[0].Descriptor()
}

func (InterpretOutput_Status) Type() protoreflect.EnumType {
	return &file_interpret_interpreter_proto_enumTypes[0]
}

func (x InterpretOutput_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InterpretOutput_Status.Descriptor instead.
func (InterpretOutput_Status) EnumDescriptor() ([]byte, []int) {
	return file_interpret_interpreter_proto_rawDescGZIP(), []int{4, 0}
}

type InterpretExprOutput_Status int32

const (
	InterpretExprOutput_OK                    InterpretExprOutput_Status = 0
	InterpretExprOutput_UNSUPPORTED_EXPR      InterpretExprOutput_Status = 1
	InterpretExprOutput_UNEXPECTED_TYPE       InterpretExprOutput_Status = 2
	InterpretExprOutput_ARITHMETIC_ERROR      InterpretExprOutput_Status = 3
	InterpretExprOutput_INDEX_OUT_OF_BOUNDS   InterpretExprOutput_Status = 4
	InterpretExprOutput_KEY_NOT_FOUND         InterpretExprOutput_Status = 5
	InterpretExprOutput_REFERENCE_NOT_FOUND   InterpretExprOutput_Status = 6
	InterpretExprOutput_CASES_NOT_EXHAUSTIVE  InterpretExprOutput_Status = 7
	InterpretExprOutput_UNSUPPORTED_OPERATION InterpretExprOutput_Status = 8
	InterpretExprOutput_ABORTED               InterpretExprOutput_Status = 9
	InterpretExprOutput_UNKNOWN               InterpretExprOutput_Status = 10
)

// Enum value maps for InterpretExprOutput_Status.
var (
	InterpretExprOutput_Status_name = map[int32]string{
		0:  "OK",
		1:  "UNSUPPORTED_EXPR",
		2:  "UNEXPECTED_TYPE",
		3:  "ARITHMETIC_ERROR",
		4:  "INDEX_OUT_OF_BOUNDS",
		5:  "KEY_NOT_FOUND",
		6:  "REFERENCE_NOT_FOUND",
		7:  "CASES_NOT_EXHAUSTIVE",
		8:  "UNSUPPORTED_OPERATION",
		9:  "ABORTED",
		10: "UNKNOWN",
	}
	InterpretExprOutput_Status_value = map[string]int32{
		"OK":                    0,
		"UNSUPPORTED_EXPR":      1,
		"UNEXPECTED_TYPE":       2,
		"ARITHMETIC_ERROR":      3,
		"INDEX_OUT_OF_BOUNDS":   4,
		"KEY_NOT_FOUND":         5,
		"REFERENCE_NOT_FOUND":   6,
		"CASES_NOT_EXHAUSTIVE":  7,
		"UNSUPPORTED_OPERATION": 8,
		"ABORTED":               9,
		"UNKNOWN":               10,
	}
)

func (x InterpretExprOutput_Status) Enum() *InterpretExprOutput_Status {
	p := new(InterpretExprOutput_Status)
	*p = x
	return p
}

func (x InterpretExprOutput_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InterpretExprOutput_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_interpret_interpreter_proto_enumTypes[1].Descriptor()
}

func (InterpretExprOutput_Status) Type() protoreflect.EnumType {
	return &file_interpret_interpreter_proto_enumTypes[1]
}

func (x InterpretExprOutput_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InterpretExprOutput_Status.Descriptor instead.
func (InterpretExprOutput_Status) EnumDescriptor() ([]byte, []int) {
	return file_interpret_interpreter_proto_rawDescGZIP(), []int{6, 0}
}

type FunDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Def   string      `protobuf:"bytes,1,opt,name=def,proto3" json:"def,omitempty"`
	Value *yaml.Value `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	With  []string    `protobuf:"bytes,3,rep,name=with,proto3" json:"with,omitempty"`
	Path  *Path       `protobuf:"bytes,10,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *FunDef) Reset() {
	*x = FunDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interpret_interpreter_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunDef) ProtoMessage() {}

func (x *FunDef) ProtoReflect() protoreflect.Message {
	mi := &file_interpret_interpreter_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunDef.ProtoReflect.Descriptor instead.
func (*FunDef) Descriptor() ([]byte, []int) {
	return file_interpret_interpreter_proto_rawDescGZIP(), []int{0}
}

func (x *FunDef) GetDef() string {
	if x != nil {
		return x.Def
	}
	return ""
}

func (x *FunDef) GetValue() *yaml.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *FunDef) GetWith() []string {
	if x != nil {
		return x.With
	}
	return nil
}

func (x *FunDef) GetPath() *Path {
	if x != nil {
		return x.Path
	}
	return nil
}

type FunDefList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent *FunDefList `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	Def    *FunDef     `protobuf:"bytes,2,opt,name=def,proto3" json:"def,omitempty"`
}

func (x *FunDefList) Reset() {
	*x = FunDefList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interpret_interpreter_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunDefList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunDefList) ProtoMessage() {}

func (x *FunDefList) ProtoReflect() protoreflect.Message {
	mi := &file_interpret_interpreter_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunDefList.ProtoReflect.Descriptor instead.
func (*FunDefList) Descriptor() ([]byte, []int) {
	return file_interpret_interpreter_proto_rawDescGZIP(), []int{1}
}

func (x *FunDefList) GetParent() *FunDefList {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *FunDefList) GetDef() *FunDef {
	if x != nil {
		return x.Def
	}
	return nil
}

type Path struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pos []*Path_Pos `protobuf:"bytes,1,rep,name=pos,proto3" json:"pos,omitempty"`
}

func (x *Path) Reset() {
	*x = Path{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interpret_interpreter_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Path) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Path) ProtoMessage() {}

func (x *Path) ProtoReflect() protoreflect.Message {
	mi := &file_interpret_interpreter_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Path.ProtoReflect.Descriptor instead.
func (*Path) Descriptor() ([]byte, []int) {
	return file_interpret_interpreter_proto_rawDescGZIP(), []int{2}
}

func (x *Path) GetPos() []*Path_Pos {
	if x != nil {
		return x.Pos
	}
	return nil
}

type InterpretInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *InterpretInput) Reset() {
	*x = InterpretInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interpret_interpreter_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterpretInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterpretInput) ProtoMessage() {}

func (x *InterpretInput) ProtoReflect() protoreflect.Message {
	mi := &file_interpret_interpreter_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterpretInput.ProtoReflect.Descriptor instead.
func (*InterpretInput) Descriptor() ([]byte, []int) {
	return file_interpret_interpreter_proto_rawDescGZIP(), []int{3}
}

func (x *InterpretInput) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type InterpretOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        InterpretOutput_Status     `protobuf:"varint,1,opt,name=status,proto3,enum=interpret.InterpretOutput_Status" json:"status,omitempty"`
	ErrorMessage  string                     `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	ExprErrorPath *Path                      `protobuf:"bytes,3,opt,name=expr_error_path,json=exprErrorPath,proto3" json:"expr_error_path,omitempty"`
	ExprStatus    InterpretExprOutput_Status `protobuf:"varint,4,opt,name=expr_status,json=exprStatus,proto3,enum=interpret.InterpretExprOutput_Status" json:"expr_status,omitempty"`
	Value         *yaml.Value                `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *InterpretOutput) Reset() {
	*x = InterpretOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interpret_interpreter_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterpretOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterpretOutput) ProtoMessage() {}

func (x *InterpretOutput) ProtoReflect() protoreflect.Message {
	mi := &file_interpret_interpreter_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterpretOutput.ProtoReflect.Descriptor instead.
func (*InterpretOutput) Descriptor() ([]byte, []int) {
	return file_interpret_interpreter_proto_rawDescGZIP(), []int{4}
}

func (x *InterpretOutput) GetStatus() InterpretOutput_Status {
	if x != nil {
		return x.Status
	}
	return InterpretOutput_OK
}

func (x *InterpretOutput) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *InterpretOutput) GetExprErrorPath() *Path {
	if x != nil {
		return x.ExprErrorPath
	}
	return nil
}

func (x *InterpretOutput) GetExprStatus() InterpretExprOutput_Status {
	if x != nil {
		return x.ExprStatus
	}
	return InterpretExprOutput_OK
}

func (x *InterpretOutput) GetValue() *yaml.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type InterpretExprInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path *Path       `protobuf:"bytes,10,opt,name=path,proto3" json:"path,omitempty"`
	Defs *FunDefList `protobuf:"bytes,1,opt,name=defs,proto3" json:"defs,omitempty"`
	Expr *yaml.Value `protobuf:"bytes,2,opt,name=expr,proto3" json:"expr,omitempty"`
}

func (x *InterpretExprInput) Reset() {
	*x = InterpretExprInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interpret_interpreter_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterpretExprInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterpretExprInput) ProtoMessage() {}

func (x *InterpretExprInput) ProtoReflect() protoreflect.Message {
	mi := &file_interpret_interpreter_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterpretExprInput.ProtoReflect.Descriptor instead.
func (*InterpretExprInput) Descriptor() ([]byte, []int) {
	return file_interpret_interpreter_proto_rawDescGZIP(), []int{5}
}

func (x *InterpretExprInput) GetPath() *Path {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *InterpretExprInput) GetDefs() *FunDefList {
	if x != nil {
		return x.Defs
	}
	return nil
}

func (x *InterpretExprInput) GetExpr() *yaml.Value {
	if x != nil {
		return x.Expr
	}
	return nil
}

type InterpretExprOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       InterpretExprOutput_Status `protobuf:"varint,1,opt,name=status,proto3,enum=interpret.InterpretExprOutput_Status" json:"status,omitempty"`
	ErrorMessage string                     `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	ErrorPath    *Path                      `protobuf:"bytes,3,opt,name=error_path,json=errorPath,proto3" json:"error_path,omitempty"`
	Value        *yaml.Value                `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *InterpretExprOutput) Reset() {
	*x = InterpretExprOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interpret_interpreter_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterpretExprOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterpretExprOutput) ProtoMessage() {}

func (x *InterpretExprOutput) ProtoReflect() protoreflect.Message {
	mi := &file_interpret_interpreter_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterpretExprOutput.ProtoReflect.Descriptor instead.
func (*InterpretExprOutput) Descriptor() ([]byte, []int) {
	return file_interpret_interpreter_proto_rawDescGZIP(), []int{6}
}

func (x *InterpretExprOutput) GetStatus() InterpretExprOutput_Status {
	if x != nil {
		return x.Status
	}
	return InterpretExprOutput_OK
}

func (x *InterpretExprOutput) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *InterpretExprOutput) GetErrorPath() *Path {
	if x != nil {
		return x.ErrorPath
	}
	return nil
}

func (x *InterpretExprOutput) GetValue() *yaml.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type Path_Pos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index int64  `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Key   string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *Path_Pos) Reset() {
	*x = Path_Pos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interpret_interpreter_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Path_Pos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Path_Pos) ProtoMessage() {}

func (x *Path_Pos) ProtoReflect() protoreflect.Message {
	mi := &file_interpret_interpreter_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Path_Pos.ProtoReflect.Descriptor instead.
func (*Path_Pos) Descriptor() ([]byte, []int) {
	return file_interpret_interpreter_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Path_Pos) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Path_Pos) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

var File_interpret_interpreter_proto protoreflect.FileDescriptor

var file_interpret_interpreter_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x1a, 0x10, 0x79, 0x61, 0x6d, 0x6c, 0x2f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x76, 0x0a, 0x06, 0x46, 0x75,
	0x6e, 0x44, 0x65, 0x66, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x64, 0x65, 0x66, 0x12, 0x21, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x61, 0x6d, 0x6c, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x69, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x77, 0x69, 0x74, 0x68, 0x12, 0x23, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x22, 0x60, 0x0a, 0x0a, 0x46, 0x75, 0x6e, 0x44, 0x65, 0x66, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x2d, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x2e, 0x46, 0x75, 0x6e,
	0x44, 0x65, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x23, 0x0a, 0x03, 0x64, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x2e, 0x46, 0x75, 0x6e, 0x44, 0x65, 0x66, 0x52,
	0x03, 0x64, 0x65, 0x66, 0x22, 0x5c, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x25, 0x0a, 0x03,
	0x70, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x65, 0x74, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x2e, 0x50, 0x6f, 0x73, 0x52, 0x03,
	0x70, 0x6f, 0x73, 0x1a, 0x2d, 0x0a, 0x03, 0x50, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x22, 0x28, 0x0a, 0x0e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xdd, 0x02, 0x0a,
	0x0f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x12, 0x39, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x21, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x37, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x65, 0x74, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x72,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x61, 0x74, 0x68, 0x12, 0x46, 0x0a, 0x0b, 0x65, 0x78, 0x70,
	0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x65, 0x74, 0x45, 0x78, 0x70, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x21, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x79, 0x61, 0x6d, 0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x46, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x06,
	0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x45, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a,
	0x45, 0x58, 0x50, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x22, 0x85, 0x01, 0x0a,
	0x12, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x45, 0x78, 0x70, 0x72, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x2e, 0x50, 0x61,
	0x74, 0x68, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x65, 0x66, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72,
	0x65, 0x74, 0x2e, 0x46, 0x75, 0x6e, 0x44, 0x65, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x64,
	0x65, 0x66, 0x73, 0x12, 0x1f, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x79, 0x61, 0x6d, 0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04,
	0x65, 0x78, 0x70, 0x72, 0x22, 0xb4, 0x03, 0x0a, 0x13, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72,
	0x65, 0x74, 0x45, 0x78, 0x70, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x3d, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72,
	0x65, 0x74, 0x45, 0x78, 0x70, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x2e, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74,
	0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x21, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x79, 0x61, 0x6d, 0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xe5, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x06,
	0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50,
	0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x45, 0x58, 0x50, 0x52, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f,
	0x55, 0x4e, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0x02, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x45, 0x54, 0x49, 0x43, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4e, 0x44, 0x45, 0x58,
	0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x53, 0x10, 0x04,
	0x12, 0x11, 0x0a, 0x0d, 0x4b, 0x45, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14,
	0x43, 0x41, 0x53, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x48, 0x41, 0x55, 0x53,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50,
	0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x08, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x09, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x0a, 0x32, 0x88, 0x09, 0x0a, 0x0b,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x08, 0x49,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x12, 0x19, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x65, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x1a, 0x1a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x00,
	0x12, 0x4f, 0x0a, 0x0c, 0x49, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x45, 0x78, 0x70, 0x72,
	0x12, 0x1d, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x45, 0x78, 0x70, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a,
	0x1e, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x65, 0x74, 0x45, 0x78, 0x70, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22,
	0x00, 0x12, 0x4f, 0x0a, 0x0c, 0x49, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x45, 0x76, 0x61,
	0x6c, 0x12, 0x1d, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x45, 0x78, 0x70, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x1a, 0x1e, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x45, 0x78, 0x70, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x22, 0x00, 0x12, 0x51, 0x0a, 0x0e, 0x49, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x53, 0x63,
	0x61, 0x6c, 0x61, 0x72, 0x12, 0x1d, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x45, 0x78, 0x70, 0x72, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x1a, 0x1e, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x45, 0x78, 0x70, 0x72, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0b, 0x49, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65,
	0x74, 0x4f, 0x62, 0x6a, 0x12, 0x1d, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x45, 0x78, 0x70, 0x72, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x1a, 0x1e, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x45, 0x78, 0x70, 0x72, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0b, 0x49, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65,
	0x74, 0x41, 0x72, 0x72, 0x12, 0x1d, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x45, 0x78, 0x70, 0x72, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x1a, 0x1e, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x45, 0x78, 0x70, 0x72, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0c, 0x49, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65,
	0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x1d, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65,
	0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x45, 0x78, 0x70, 0x72, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x1a, 0x1e, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x45, 0x78, 0x70, 0x72, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x11, 0x49, 0x74, 0x65, 0x72, 0x70, 0x72,
	0x65, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65,
	0x74, 0x45, 0x78, 0x70, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x1e, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74,
	0x45, 0x78, 0x70, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0f,
	0x49, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x47, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x12,
	0x1d, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x65, 0x74, 0x45, 0x78, 0x70, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x1e,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x65, 0x74, 0x45, 0x78, 0x70, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x00,
	0x12, 0x52, 0x0a, 0x0f, 0x49, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x46, 0x75, 0x6e, 0x43,
	0x61, 0x6c, 0x6c, 0x12, 0x1d, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x45, 0x78, 0x70, 0x72, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x1a, 0x1e, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x45, 0x78, 0x70, 0x72, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0d, 0x49, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x73, 0x12, 0x1d, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65,
	0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x45, 0x78, 0x70, 0x72, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x1a, 0x1e, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x45, 0x78, 0x70, 0x72, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0f, 0x49, 0x74, 0x65, 0x72, 0x70, 0x72,
	0x65, 0x74, 0x4f, 0x70, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x1d, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x70, 0x72, 0x65, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x45,
	0x78, 0x70, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x1e, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x65, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x45, 0x78,
	0x70, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x10, 0x49, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x4f, 0x70, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x1d,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x65, 0x74, 0x45, 0x78, 0x70, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x1e, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x65, 0x74, 0x45, 0x78, 0x70, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x00, 0x12,
	0x55, 0x0a, 0x12, 0x49, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x4f, 0x70, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x64, 0x69, 0x63, 0x12, 0x1d, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65,
	0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x45, 0x78, 0x70, 0x72, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x1a, 0x1e, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x45, 0x78, 0x70, 0x72, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x22, 0x00, 0x42, 0x2e, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4a, 0x75, 0x6d, 0x70, 0x61, 0x6b, 0x75, 0x2f, 0x65, 0x79, 0x61,
	0x6d, 0x6c, 0x61, 0x74, 0x65, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_interpret_interpreter_proto_rawDescOnce sync.Once
	file_interpret_interpreter_proto_rawDescData = file_interpret_interpreter_proto_rawDesc
)

func file_interpret_interpreter_proto_rawDescGZIP() []byte {
	file_interpret_interpreter_proto_rawDescOnce.Do(func() {
		file_interpret_interpreter_proto_rawDescData = protoimpl.X.CompressGZIP(file_interpret_interpreter_proto_rawDescData)
	})
	return file_interpret_interpreter_proto_rawDescData
}

var file_interpret_interpreter_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_interpret_interpreter_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_interpret_interpreter_proto_goTypes = []any{
	(InterpretOutput_Status)(0),     // 0: interpret.InterpretOutput.Status
	(InterpretExprOutput_Status)(0), // 1: interpret.InterpretExprOutput.Status
	(*FunDef)(nil),                  // 2: interpret.FunDef
	(*FunDefList)(nil),              // 3: interpret.FunDefList
	(*Path)(nil),                    // 4: interpret.Path
	(*InterpretInput)(nil),          // 5: interpret.InterpretInput
	(*InterpretOutput)(nil),         // 6: interpret.InterpretOutput
	(*InterpretExprInput)(nil),      // 7: interpret.InterpretExprInput
	(*InterpretExprOutput)(nil),     // 8: interpret.InterpretExprOutput
	(*Path_Pos)(nil),                // 9: interpret.Path.Pos
	(*yaml.Value)(nil),              // 10: yaml.Value
}
var file_interpret_interpreter_proto_depIdxs = []int32{
	10, // 0: interpret.FunDef.value:type_name -> yaml.Value
	4,  // 1: interpret.FunDef.path:type_name -> interpret.Path
	3,  // 2: interpret.FunDefList.parent:type_name -> interpret.FunDefList
	2,  // 3: interpret.FunDefList.def:type_name -> interpret.FunDef
	9,  // 4: interpret.Path.pos:type_name -> interpret.Path.Pos
	0,  // 5: interpret.InterpretOutput.status:type_name -> interpret.InterpretOutput.Status
	4,  // 6: interpret.InterpretOutput.expr_error_path:type_name -> interpret.Path
	1,  // 7: interpret.InterpretOutput.expr_status:type_name -> interpret.InterpretExprOutput.Status
	10, // 8: interpret.InterpretOutput.value:type_name -> yaml.Value
	4,  // 9: interpret.InterpretExprInput.path:type_name -> interpret.Path
	3,  // 10: interpret.InterpretExprInput.defs:type_name -> interpret.FunDefList
	10, // 11: interpret.InterpretExprInput.expr:type_name -> yaml.Value
	1,  // 12: interpret.InterpretExprOutput.status:type_name -> interpret.InterpretExprOutput.Status
	4,  // 13: interpret.InterpretExprOutput.error_path:type_name -> interpret.Path
	10, // 14: interpret.InterpretExprOutput.value:type_name -> yaml.Value
	5,  // 15: interpret.Interpreter.Iterpret:input_type -> interpret.InterpretInput
	7,  // 16: interpret.Interpreter.IterpretExpr:input_type -> interpret.InterpretExprInput
	7,  // 17: interpret.Interpreter.IterpretEval:input_type -> interpret.InterpretExprInput
	7,  // 18: interpret.Interpreter.IterpretScalar:input_type -> interpret.InterpretExprInput
	7,  // 19: interpret.Interpreter.IterpretObj:input_type -> interpret.InterpretExprInput
	7,  // 20: interpret.Interpreter.IterpretArr:input_type -> interpret.InterpretExprInput
	7,  // 21: interpret.Interpreter.IterpretJson:input_type -> interpret.InterpretExprInput
	7,  // 22: interpret.Interpreter.IterpretRangeIter:input_type -> interpret.InterpretExprInput
	7,  // 23: interpret.Interpreter.IterpretGetElem:input_type -> interpret.InterpretExprInput
	7,  // 24: interpret.Interpreter.IterpretFunCall:input_type -> interpret.InterpretExprInput
	7,  // 25: interpret.Interpreter.IterpretCases:input_type -> interpret.InterpretExprInput
	7,  // 26: interpret.Interpreter.IterpretOpUnary:input_type -> interpret.InterpretExprInput
	7,  // 27: interpret.Interpreter.IterpretOpBinary:input_type -> interpret.InterpretExprInput
	7,  // 28: interpret.Interpreter.IterpretOpVariadic:input_type -> interpret.InterpretExprInput
	6,  // 29: interpret.Interpreter.Iterpret:output_type -> interpret.InterpretOutput
	8,  // 30: interpret.Interpreter.IterpretExpr:output_type -> interpret.InterpretExprOutput
	8,  // 31: interpret.Interpreter.IterpretEval:output_type -> interpret.InterpretExprOutput
	8,  // 32: interpret.Interpreter.IterpretScalar:output_type -> interpret.InterpretExprOutput
	8,  // 33: interpret.Interpreter.IterpretObj:output_type -> interpret.InterpretExprOutput
	8,  // 34: interpret.Interpreter.IterpretArr:output_type -> interpret.InterpretExprOutput
	8,  // 35: interpret.Interpreter.IterpretJson:output_type -> interpret.InterpretExprOutput
	8,  // 36: interpret.Interpreter.IterpretRangeIter:output_type -> interpret.InterpretExprOutput
	8,  // 37: interpret.Interpreter.IterpretGetElem:output_type -> interpret.InterpretExprOutput
	8,  // 38: interpret.Interpreter.IterpretFunCall:output_type -> interpret.InterpretExprOutput
	8,  // 39: interpret.Interpreter.IterpretCases:output_type -> interpret.InterpretExprOutput
	8,  // 40: interpret.Interpreter.IterpretOpUnary:output_type -> interpret.InterpretExprOutput
	8,  // 41: interpret.Interpreter.IterpretOpBinary:output_type -> interpret.InterpretExprOutput
	8,  // 42: interpret.Interpreter.IterpretOpVariadic:output_type -> interpret.InterpretExprOutput
	29, // [29:43] is the sub-list for method output_type
	15, // [15:29] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_interpret_interpreter_proto_init() }
func file_interpret_interpreter_proto_init() {
	if File_interpret_interpreter_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_interpret_interpreter_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*FunDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interpret_interpreter_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*FunDefList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interpret_interpreter_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Path); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interpret_interpreter_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*InterpretInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interpret_interpreter_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*InterpretOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interpret_interpreter_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*InterpretExprInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interpret_interpreter_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*InterpretExprOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_interpret_interpreter_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*Path_Pos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_interpret_interpreter_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_interpret_interpreter_proto_goTypes,
		DependencyIndexes: file_interpret_interpreter_proto_depIdxs,
		EnumInfos:         file_interpret_interpreter_proto_enumTypes,
		MessageInfos:      file_interpret_interpreter_proto_msgTypes,
	}.Build()
	File_interpret_interpreter_proto = out.File
	file_interpret_interpreter_proto_rawDesc = nil
	file_interpret_interpreter_proto_goTypes = nil
	file_interpret_interpreter_proto_depIdxs = nil
}
