<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: eval/operation.proto

namespace Jumpaku\Eyamluate\Eval_\PBOpBinary;

use UnexpectedValueException;

/**
 * Protobuf type <code>eval.OpBinary.Operator</code>
 */
class PBOperator
{
    /**
     * Generated from protobuf enum <code>UNSPECIFIED = 0;</code>
     */
    const UNSPECIFIED = 0;
    /**
     * Generated from protobuf enum <code>SUB = 1;</code>
     */
    const SUB = 1;
    /**
     * Generated from protobuf enum <code>DIV = 2;</code>
     */
    const DIV = 2;
    /**
     * Generated from protobuf enum <code>EQ = 4;</code>
     */
    const EQ = 4;
    /**
     * Generated from protobuf enum <code>NEQ = 5;</code>
     */
    const NEQ = 5;
    /**
     * Generated from protobuf enum <code>LT = 6;</code>
     */
    const LT = 6;
    /**
     * Generated from protobuf enum <code>LTE = 7;</code>
     */
    const LTE = 7;
    /**
     * Generated from protobuf enum <code>GT = 8;</code>
     */
    const GT = 8;
    /**
     * Generated from protobuf enum <code>GTE = 9;</code>
     */
    const GTE = 9;

    private static $valueToName = [
        self::UNSPECIFIED => 'UNSPECIFIED',
        self::SUB => 'SUB',
        self::DIV => 'DIV',
        self::EQ => 'EQ',
        self::NEQ => 'NEQ',
        self::LT => 'LT',
        self::LTE => 'LTE',
        self::GT => 'GT',
        self::GTE => 'GTE',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

